------------------------------------------------------

무엇이 실시간을 가능하게 하는가

http
- 모든 서버가 동작하는 방식 
- 클라이언트가 요청해야 서버에서 응답한다.
- stateless
=> 백엔드가 유저를 기억하지 못함
=> 유저를 식별하기 위한 쿠키가 요청시 전송


webSocket
- wss:// 로 요청가능한 프로토콜
- 핸드 쉐이크 => 양방향 연결이 성립

- 연결되어있기에 유저가 누군지 알 수 있다.
- 서버에서 먼저 요청이 가능하다.

------------------------------------------------------

ws 라이브러리 
- websocket 프로토콜의 핵심 API 구현
- Node용 라이브러리

프론트엔드에는 기본적으로 websocket API가 존재

------------------------------------------------------

socketIO
- websocket과 다른 기법을 같이 활용해서 
  통신을 하는 framework
- 실시간, 양방향, 이벤트 기반의 통신
- 자동 재연결을 지원해줌


- 다양한 유틸리티를 제공
=> 자동으로 소켓으로 id를 바인딩해줌
=> room의 개념을 제공
=> 브로드캐스팅

=> emit
  - 커스텀 이벤트 송출
  - 객체를 argument로 보낼 수 있음
  - 서버에서 done하면 프론트에서 콜백을 실행 가능

------------------------------------------------------